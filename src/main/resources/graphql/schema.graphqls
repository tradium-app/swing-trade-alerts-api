schema {
    query : Query
    mutation: Mutation
}

type User {
    id: String!
    name: String!
    authProvider: String
    imageUrl: String
    watchList: [String]
    fcmToken: String
    countryCode: String
    timeZone: String
    ipAddress: String
    createdDate: String
    modifiedDate: String
}

type Stock {
    id: String!
    symbol: String!
    company: String
    price: Float
    changePercent: Float
    marketCap: Float
    peRatio: Float
    week52High: Float
    week52Low: Float
    ytdChangePercent: Float
    beta: Float
    revenueGrowthQuarterlyYoy: Float
    revenueGrowthTTMYoy: Float
    rsi: Float
    redditRank: Float
    alertStatus: Boolean
    isOnWatchList: Boolean
    alerts: [Alert]
    modifiedDate: String
}

type Condition {
    order: Float!
    indicator: String!
    timeframe: String!
    value: String
    valueText: String
    valueConfig: ValueConfig
}

type ValueConfig {
    length: Float
    value: Float
    upDirection: Boolean
}

type Alert {
    id: String!
    symbol: String!
    signal: String
    title: String
    status: String
    conditions: [Condition]
    createdDate: String
    modifiedDate: String
}

input AlertInput {
    id: String
    symbol: String!
    signal: String
    title: String
    status: String
    conditions: [ConditionInput]
}

input ConditionInput {
    order: Float
    indicator: String!
    timeframe: String!
    value: String
    valueText: String
    valueConfig: ValueConfigInput
}

input ValueConfigInput {
    length: Float
    value: Float
    upDirection: Boolean
}

type Notification {
    id: String!
    alert: Alert
    message: String!
}

type Response {
    success: Boolean
    message: String
    user: User
    alert: Alert
}

type Query {
    getWatchList:[Stock]
    searchStocks(searchTerm: String): [Stock]
    getAlerts(symbol: String): [Alert]
    getStockProfile(symbol: String): Stock
}

type Mutation {
    loginUser(accessToken: String): Response
    addStock(symbol: String):Response
    addAlert(alertInput: AlertInput): Response
    updateAlert(alertInput: AlertInput): Response
    deleteAlert(alertId: String): Response
    runJob(jobId: Float): Response
}