schema {
    query : Query
    mutation: Mutation
}

scalar UtcDate

type User {
    id: String!
    name: String!
    authProvider: String
    imageUrl: String
    watchList: [String]
    fcmToken: String
    countryCode: String
    timeZone: String
    ipAddress: String
    createdDate: UtcDate
    modifiedDate: UtcDate
}

type Stock {
    id: String!
    symbol: String!
    company: String
    price: Float
    recentClosePrices: [Float]
    nextPredictions: [Float]
    changePercent: Float
    marketCap: Float
    peRatio: Float
    week52High: Float
    week52Low: Float
    ytdChangePercent: Float
    beta: Float
    revenueGrowthQuarterlyYoy: Float
    revenueGrowthTTMYoy: Float
    priceToSalesTTM: Float
    priceToEarningsTTM: Float
    nextEarningsDate: UtcDate
    rsi: Float
    trend: String
    redditRank: Float
    tipranksPriceTarget: Float
    sr: [Float]
    alertStatus: Boolean
    isOnWatchList: Boolean
    alerts: [Alert]
    modifiedDate: UtcDate
}

type Condition {
    order: Float!
    timeframe: String
    isNegative: Boolean
    indicator1: String!
    operator: String
    indicator2: String
    value: String
    valueText: String
    diff_percent: Float
    config1: ValueConfig
    config2: ValueConfig
}

type ValueConfig {
    length: Float
}

type Alert {
    id: String!
    symbol: String!
    signal: String
    title: String
    status: String
    enabled: Boolean
    conditions: [Condition]
    alertOnDate: UtcDate
    createdDate: UtcDate
    modifiedDate: UtcDate
}

input AlertInput {
    id: String
    symbol: String!
    signal: String
    title: String
    enabled: Boolean
    conditions: [ConditionInput]
}

input ConditionInput {
    order: Float!
    timeframe: String
    isNegative: Boolean
    indicator1: String!
    operator: String
    indicator2: String
    value: String
    valueText: String
    diff_percent: Float
    config1: ValueConfigInput
    config2: ValueConfigInput
}

input ValueConfigInput {
    length: Float
}

type Article {
    symbol: String!
    headline: String
    link: String
    createdDate: UtcDate
}

type Response {
    success: Boolean
    message: String
    user: User
    alert: Alert
}

type Query {
    getWatchList:[Stock]
    searchStocks(searchTerm: String): [Stock]
    getAlerts(symbol: String): [Alert]
    getStockProfile(symbol: String): Stock
    getWatchListStockTrendlines: [Stock]
    getWatchListNews: [Article]
}

type Mutation {
    loginUser(accessToken: String): Response
    addStock(symbol: String):Response
    removeStock(symbol: String):Response
    addAlert(alertInput: AlertInput): Response
    updateAlert(alertInput: AlertInput): Response
    deleteAlert(alertId: String): Response
    copyAlertToAllStocks(alertId: String): Response
    runJob(jobId: Float): Response
}